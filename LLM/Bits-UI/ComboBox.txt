# Combobox Documentation

Enables users to pick from a list of options displayed in a dropdown.

This is a documentation section that potentially contains examples, demos, and other useful information related to a specific part of Bits UI. When helping users with this documentation, you can ignore the classnames applied to the demos unless they are relevant to the user's issue.

```svelte
<script lang="ts">
  import { Combobox } from "bits-ui";
  import CaretUpDown from "phosphor-svelte/lib/CaretUpDown";
  import Check from "phosphor-svelte/lib/Check";
  import OrangeSlice from "phosphor-svelte/lib/OrangeSlice";
  import CaretDoubleUp from "phosphor-svelte/lib/CaretDoubleUp";
  import CaretDoubleDown from "phosphor-svelte/lib/CaretDoubleDown";
  const fruits = [
    { value: "mango", label: "Mango" },
    { value: "watermelon", label: "Watermelon" },
    { value: "apple", label: "Apple" },
    { value: "pineapple", label: "Pineapple" },
    { value: "orange", label: "Orange" },
    { value: "grape", label: "Grape" },
    { value: "strawberry", label: "Strawberry" },
    { value: "banana", label: "Banana" },
    { value: "kiwi", label: "Kiwi" },
    { value: "peach", label: "Peach" },
    { value: "cherry", label: "Cherry" },
    { value: "blueberry", label: "Blueberry" },
    { value: "raspberry", label: "Raspberry" },
    { value: "blackberry", label: "Blackberry" },
    { value: "plum", label: "Plum" },
    { value: "apricot", label: "Apricot" },
    { value: "pear", label: "Pear" },
    { value: "grapefruit", label: "Grapefruit" }
  ];
  let searchValue = $state("");
  const filteredFruits = $derived(
    searchValue === ""
      ? fruits
      : fruits.filter((fruit) =>
          fruit.label.toLowerCase().includes(searchValue.toLowerCase())
        )
  );
</script>
<Combobox.Root
  type="multiple"
  name="favoriteFruit"
  onOpenChange={(o) => {
    if (!o) searchValue = "";
  }}
>
  <div class="relative">
    <OrangeSlice
      class="text-muted-foreground absolute start-3 top-1/2 size-6 -translate-y-1/2"
    />
    <Combobox.Input
      oninput={(e) => (searchValue = e.currentTarget.value)}
      class="h-input rounded-9px border-border-input bg-background placeholder:text-foreground-alt/50 focus:ring-foreground focus:ring-offset-background focus:outline-hidden inline-flex w-[296px] truncate border px-11 text-base transition-colors focus:ring-2 focus:ring-offset-2 sm:text-sm"
      placeholder="Search a fruit"
      aria-label="Search a fruit"
    />
    <Combobox.Trigger class="absolute end-3 top-1/2 size-6 -translate-y-1/2">
      <CaretUpDown class="text-muted-foreground size-6" />
    </Combobox.Trigger>
  </div>
  <Combobox.Portal>
    <Combobox.Content
      class="focus-override border-muted bg-background shadow-popover data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 outline-hidden z-50 h-96 max-h-[var(--bits-combobox-content-available-height)] w-[var(--bits-combobox-anchor-width)] min-w-[var(--bits-combobox-anchor-width)] select-none rounded-xl border px-1 py-3 data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1"
      sideOffset={10}
    >
      <Combobox.ScrollUpButton
        class="flex w-full items-center justify-center py-1"
      >
        <CaretDoubleUp class="size-3" />
      </Combobox.ScrollUpButton>
      <Combobox.Viewport class="p-1">
        {#each filteredFruits as fruit, i (i + fruit.value)}
          <Combobox.Item
            class="rounded-button data-highlighted:bg-muted outline-hidden flex h-10 w-full select-none items-center py-3 pl-5 pr-1.5 text-sm capitalize"
            value={fruit.value}
            label={fruit.label}
          >
            {#snippet children({ selected })}
              {fruit.label}
              {#if selected}
                <div class="ml-auto">
                  <Check />
                </div>
              {/if}
            {/snippet}
          </Combobox.Item>
        {:else}
          <span class="block px-5 py-2 text-sm text-muted-foreground">
            No results found, try again.
          </span>
        {/each}
      </Combobox.Viewport>
      <Combobox.ScrollDownButton
        class="flex w-full items-center justify-center py-1"
      >
        <CaretDoubleDown class="size-3" />
      </Combobox.ScrollDownButton>
    </Combobox.Content>
  </Combobox.Portal>
</Combobox.Root>
```

## Overview

The Combobox component combines the functionality of an input field with a dropdown list of selectable options. It provides users with the ability to search, filter, and select from a predefined set of choices.

## Key Features

- **Keyboard Navigation**: Full support for keyboard interactions, allowing users to navigate and select options without using a mouse.  
- **Customizable Rendering**: Flexible architecture for rendering options, including support for grouped items.  
- **Accessibility**: Built with ARIA attributes and keyboard interactions to ensure screen reader compatibility and accessibility standards.  
- **Portal Support**: Ability to render the dropdown content in a portal, preventing layout issues in complex UI structures. ## Architecture

The Combobox component is composed of several sub-components, each with a specific role:

- **Root**: The main container component that manages the state and context for the combobox.  
- **Input**: The input field that allows users to enter search queries.  
- **Trigger**: The button or element that opens the dropdown list.  
- **Portal**: Responsible for portalling the dropdown content to the body or a custom target.  
- **Group**: A container for grouped items, used to group related items.  
- **GroupHeading**: A heading for a group of items, providing a descriptive label for the group.  
- **Item**: An individual item within the list.  
- **Separator**: A visual separator between items.  
- **Content**: The dropdown container that displays the items. It uses [Floating UI](https://floating-ui.com/)
  to position the content relative to the trigger.
- **ContentStatic**: An alternative to the Content component, that enables you to opt-out of Floating UI and position the content yourself.  
- **Viewport**: The visible area of the dropdown content, used to determine the size and scroll behavior.  
- **ScrollUpButton**: A button that scrolls the content up when the content is larger than the viewport.  
- **ScrollDownButton**: A button that scrolls the content down when the content is larger than the viewport.  
- **Arrow**: An arrow element that points to the trigger when using the `Combobox.Content` component.

## Structure

Here's an overview of how the Combobox component is structured in code:

```svelte
<script lang="ts">
 import { Combobox } from "bits-ui";
</script>
<Combobox.Root>
 <Combobox.Input />
 <Combobox.Trigger />
 <Combobox.Portal>
  <Combobox.Content>
   <Combobox.Group>
    <Combobox.GroupHeading />
    <Combobox.Item />
   </Combobox.Group>
   <Combobox.Item />
  </Combobox.Content>
 </Combobox.Portal>
</Combobox.Root>
```

## Reusable Components

It's recommended to use the `Combobox` primitives to build your own custom combobox component that can be reused throughout your application.

CustomCombobox.svelte

```svelte
<script lang="ts">
 import { Combobox, type WithoutChildrenOrChild, mergeProps } from "bits-ui";
 type Props = Combobox.RootProps & {
  inputProps?: WithoutChildrenOrChild<Combobox.InputProps>;
  contentProps?: WithoutChildrenOrChild<Combobox.ContentProps>;
 };
 let {
  items = [],
  value = $bindable(),
  open = $bindable(false),
  inputProps,
  contentProps,
  type,
  ...restProps
 }: Props = $props();
 let searchValue = $state("");
 const filteredItems = $derived.by(() => {
  if (searchValue === "") return items;
  return items.filter((item) => item.label.toLowerCase().includes(searchValue.toLowerCase()));
 });
 function handleInput(e: Event & { currentTarget: HTMLInputElement }) {
  searchValue = e.currentTarget.value;
 }
 function handleOpenChange(newOpen: boolean) {
  if (!newOpen) searchValue = "";
 }
 const mergedRootProps = $derived(mergeProps(restProps, { onOpenChange: handleOpenChange }));
 const mergedInputProps = $derived(mergeProps(inputProps, { oninput: handleInput }));
</script>

<Combobox.Root {type} {items} bind:value={value as never} bind:open {...mergedRootProps}>
 <Combobox.Input {...mergedInputProps} />
 <Combobox.Trigger>Open</Combobox.Trigger>
 <Combobox.Portal>
  <Combobox.Content {...contentProps}>
   {#each filteredItems as item, i (i + item.value)}
    <Combobox.Item {...item}>
     {#snippet children({ selected })}
      {item.label}
      {selected ? "" : ""}
     {/snippet}
    </Combobox.Item>
   {:else}
    <span> No results found </span>
   {/each}
  </Combobox.Content>
 </Combobox.Portal>
</Combobox.Root>
```

+page.svelte

```svelte
<script lang="ts">
 import { CustomCombobox } from "$lib/components";
 const items = [
  { value: "mango", label: "Mango" },
  { value: "watermelon", label: "Watermelon" },
  { value: "apple", label: "Apple" },
  // ...
 ];
</script>
<CustomCombobox type="single" {items} />
```

## Managing Value State

This section covers how to manage the `value` state of the Combobox.

### Two-Way Binding

Use `bind:value` for simple, automatic state synchronization:

```svelte
<script lang="ts">
 import { Combobox } from "bits-ui";
 let myValue = $state("");
</script>
<button onclick={() => (myValue = "A")}> Select A </button>
<Combobox.Root type="single" bind:value={myValue}>
</Combobox.Root>
```

### Fully Controlled

Use a [Function Binding](https://svelte.dev/docs/svelte/bind#Function-bindings) for complete control over the state's reads and writes.

```svelte
<script lang="ts">
 import { Combobox } from "bits-ui";
 let myValue = $state("");
 function getValue() {
  return myValue;
 }
 function setValue(newValue: string) {
  myValue = newValue;
 }
</script>
<Combobox.Root type="single" bind:value={getValue, setValue}>
</Combobox.Root>
```

## Managing Open State

This section covers how to manage the `open` state of the Combobox.

### Two-Way Binding

Use `bind:open` for simple, automatic state synchronization:

```svelte
<script lang="ts">
 import { Combobox } from "bits-ui";
 let myOpen = $state(false);
</script>
<button onclick={() => (myOpen = true)}> Open </button>
<Combobox.Root bind:open={myOpen}>
</Combobox.Root>
```

### Fully Controlled

Use a [Function Binding](https://svelte.dev/docs/svelte/bind#Function-bindings) for complete control over the state's reads and writes.

```svelte
<script lang="ts">
 import { Combobox } from "bits-ui";
 let myOpen = $state(false);
 function getOpen() {
  return myOpen;
 }
 function setOpen(newOpen: boolean) {
  myOpen = newOpen;
 }
</script>
<Combobox.Root type="single" bind:open={getOpen, setOpen}>
</Combobox.Root>
```

## Opt-out of Floating UI

When you use the `Combobox.Content` component, Bits UI uses [Floating UI](https://floating-ui.com/) to position the content relative to the trigger, similar to other popover-like components.

You can opt-out of this behavior by instead using the `Combobox.ContentStatic` component.

```svelte
<Combobox.Root>
 <Combobox.Trigger />
 <Combobox.Input />
 <Combobox.Portal>
  <Combobox.ContentStatic>
   <Combobox.ScrollUpButton />
   <Combobox.Viewport>
    <Combobox.Item />
    <Combobox.Group>
     <Combobox.GroupHeading />
     <Combobox.Item />
    </Combobox.Group>
   </Combobox.Viewport>
   <Combobox.ScrollDownButton />
  </Combobox.ContentStatic>
 </Combobox.Portal>
</Combobox.Root>
```

When using this component, you'll need to handle the positioning of the content yourself. Keep in mind that using `Combobox.Portal` alongside `Combobox.ContentStatic` may result in some unexpected positioning behavior, feel free to not use the portal or work around it.

## Custom Anchor

By default, the `Combobox.Content` is anchored to the `Combobox.Input` component, which determines where the content is positioned.

If you wish to instead anchor the content to a different element, you can pass either a selector string or an `HTMLElement` to the `customAnchor` prop of the `Combobox.Content` component.

```svelte
<script lang="ts">
 import { Combobox } from "bits-ui";
 let customAnchor = $state<HTMLElement>(null!);
</script>
<div bind:this={customAnchor}></div>
<Combobox.Root>
 <Combobox.Trigger />
 <Combobox.Input />
 <Combobox.Content {customAnchor}>
 </Combobox.Content>
</Combobox.Root>
```

## What is the Viewport?

The `Combobox.Viewport` component is used to determine the size of the content in order to determine whether or not the scroll up and down buttons should be rendered.

If you wish to set a minimum/maximum height for the select content, you should apply it to the `Combobox.Viewport` component.

## Scroll Up/Down Buttons

The `Combobox.ScrollUpButton` and `Combobox.ScrollDownButton` components are used to render the scroll up and down buttons when the select content is larger than the viewport.

You must use the `Combobox.Viewport` component when using the scroll buttons.

### Custom Scroll Delay

The initial and subsequent scroll delays can be controlled using the `delay` prop on the buttons.

For example, we can use the [`cubicOut`](https://svelte.dev/docs/svelte/svelte-easing#cubicOut) easing function from Svelte to create a smooth scrolling effect that speeds up over time.

```svelte
<script lang="ts">
  import { Combobox } from "bits-ui";
  import CaretUpDown from "phosphor-svelte/lib/CaretUpDown";
  import Check from "phosphor-svelte/lib/Check";
  import OrangeSlice from "phosphor-svelte/lib/OrangeSlice";
  import CaretDoubleUp from "phosphor-svelte/lib/CaretDoubleUp";
  import CaretDoubleDown from "phosphor-svelte/lib/CaretDoubleDown";
  import { cubicOut } from "svelte/easing";
  const fruits = [
    { value: "mango", label: "Mango" },
    { value: "watermelon", label: "Watermelon" },
    { value: "apple", label: "Apple" },
    { value: "pineapple", label: "Pineapple" },
    { value: "orange", label: "Orange" },
    { value: "grape", label: "Grape" },
    { value: "strawberry", label: "Strawberry" },
    { value: "banana", label: "Banana" },
    { value: "kiwi", label: "Kiwi" },
    { value: "peach", label: "Peach" },
    { value: "cherry", label: "Cherry" },
    { value: "blueberry", label: "Blueberry" },
    { value: "raspberry", label: "Raspberry" },
    { value: "blackberry", label: "Blackberry" },
    { value: "plum", label: "Plum" },
    { value: "apricot", label: "Apricot" },
    { value: "pear", label: "Pear" },
    { value: "grapefruit", label: "Grapefruit" }
  ];
  // Duplicate the menu items a couple of times to show off scrolling a big list
  const baseFruits = [...fruits];
  for (let i = 0; i < 10; i++) {
    for (let baseTheme of baseFruits) {
      fruits.push({ ...baseTheme, value: baseTheme.value + i });
    }
  }
  let searchValue = $state("");
  const filteredFruits = $derived(
    searchValue === ""
      ? fruits
      : fruits.filter((fruit) =>
          fruit.label.toLowerCase().includes(searchValue.toLowerCase())
        )
  );
  function autoScrollDelay(tick: number) {
    const maxDelay = 200;
    const minDelay = 25;
    const steps = 30;
    const progress = Math.min(tick / steps, 1);
    // Use the cubicOut easing function from svelte/easing
    return maxDelay - (maxDelay - minDelay) * cubicOut(progress); }
</script>
<Combobox.Root
  type="multiple"
  name="favoriteFruit"
  onOpenChange={(o) => {
    if (!o) searchValue = "";
  }}
>
  <div class="relative">
    <OrangeSlice
      class="text-muted-foreground absolute start-3 top-1/2 size-6 -translate-y-1/2"
    />
    <Combobox.Input
      oninput={(e) => (searchValue = e.currentTarget.value)}
      class="h-input rounded-9px border-border-input bg-background placeholder:text-foreground-alt/50 focus:ring-foreground focus:ring-offset-background focus:outline-hidden inline-flex w-[296px] truncate border px-11 text-base transition-colors focus:ring-2 focus:ring-offset-2 sm:text-sm"
      placeholder="Search a fruit"
      aria-label="Search a fruit"
    />
    <Combobox.Trigger class="absolute end-3 top-1/2 size-6 -translate-y-1/2">
      <CaretUpDown class="text-muted-foreground size-6" />
    </Combobox.Trigger>
  </div>
  <Combobox.Portal>
    <Combobox.Content
      class="focus-override border-muted bg-background shadow-popover data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 outline-hidden z-50 h-96 max-h-[var(--bits-combobox-content-available-height)] w-[var(--bits-combobox-anchor-width)] min-w-[var(--bits-combobox-anchor-width)] select-none rounded-xl border px-1 py-3 data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1"
      sideOffset={10}
    >
      <Combobox.ScrollUpButton
        class="flex w-full items-center justify-center py-1"
        delay={autoScrollDelay}
      >
        <CaretDoubleUp class="size-3" />
      </Combobox.ScrollUpButton>
      <Combobox.Viewport class="p-1">
        {#each filteredFruits as fruit, i (i + fruit.value)}
          <Combobox.Item
            class="rounded-button data-highlighted:bg-muted outline-hidden flex h-10 w-full select-none items-center py-3 pl-5 pr-1.5 text-sm capitalize"
            value={fruit.value}
            label={fruit.label}
          >
            {#snippet children({ selected })}
              {fruit.label}
              {#if selected}
                <div class="ml-auto">
                  <Check />
                </div>
              {/if}
            {/snippet}
          </Combobox.Item>
        {:else}
          <span class="block px-5 py-2 text-sm text-muted-foreground">
            No results found, try again.
          </span>
        {/each}
      </Combobox.Viewport>
      <Combobox.ScrollDownButton
        class="flex w-full items-center justify-center py-1"
        delay={autoScrollDelay}
      >
        <CaretDoubleDown class="size-3" />
      </Combobox.ScrollDownButton>
    </Combobox.Content>
  </Combobox.Portal>
</Combobox.Root>
```

## Native Scrolling/Overflow

If you don't want to use the [scroll buttons](#scroll-updown-buttons) and prefer to use the standard scrollbar/overflow behavior, you can omit the `Combobox.Scroll[Up|Down]Button` components and the `Combobox.Viewport` component.

You'll need to set a height on the `Combobox.Content` component and appropriate `overflow` styles to enable scrolling.

## Scroll Lock

To prevent the user from scrolling outside of the `Combobox.Content` component when open, you can set the `preventScroll` prop to `true`.

```svelte
<Combobox.Content preventScroll={true}>
</Combobox.Content>
```

## Highlighted Items

The Combobox component follows the [WAI-ARIA descendant pattern](https://www.w3.org/TR/wai-aria-practices-1.2/#combobox) for highlighting items. This means that the `Combobox.Input` retains focus the entire time, even when navigating with the keyboard, and items are highlighted as the user navigates them.

### Styling Highlighted Items

You can use the `data-highlighted` attribute on the `Combobox.Item` component to style the item differently when it is highlighted.

### onHighlight / onUnhighlight

To trigger side effects when an item is highlighted or unhighlighted, you can use the `onHighlight` and `onUnhighlight` props.

```svelte
<Combobox.Item onHighlight={() => console.log('I am highlighted!')} onUnhighlight={() => console.log('I am unhighlighted!')} />

</Combobox.Item>
```

## Svelte Transitions

You can use the `forceMount` prop along with the `child` snippet to forcefully mount the `Combobox.Content` component to use Svelte Transitions or another animation library that requires more control.

```svelte
<script lang="ts">
 import { Combobox } from "bits-ui";
 import { fly } from "svelte/transition";
</script>
<Combobox.Content forceMount>
 {#snippet child({ wrapperProps, props, open })}
  {#if open}
   <div {...wrapperProps}>
    <div {...props} transition:fly>
    </div>
   </div>
  {/if}
 {/snippet}
</Combobox.Content>
```

Of course, this isn't the prettiest syntax, so it's recommended to create your own reusable content component that handles this logic if you intend to use this approach. For more information on using transitions with Bits UI components, see the [Transitions](/docs/transitions) documentation.

```svelte
<script lang="ts">
  import { Combobox } from "bits-ui";
  import CaretUpDown from "phosphor-svelte/lib/CaretUpDown";
  import Check from "phosphor-svelte/lib/Check";
  import OrangeSlice from "phosphor-svelte/lib/OrangeSlice";
  import CaretDoubleUp from "phosphor-svelte/lib/CaretDoubleUp";
  import CaretDoubleDown from "phosphor-svelte/lib/CaretDoubleDown";
  import { fly } from "svelte/transition";
  const fruits = [
    { value: "mango", label: "Mango" },
    { value: "watermelon", label: "Watermelon" },
    { value: "apple", label: "Apple" },
    { value: "pineapple", label: "Pineapple" },
    { value: "orange", label: "Orange" },
    { value: "grape", label: "Grape" },
    { value: "strawberry", label: "Strawberry" },
    { value: "banana", label: "Banana" },
    { value: "kiwi", label: "Kiwi" },
    { value: "peach", label: "Peach" },
    { value: "cherry", label: "Cherry" },
    { value: "blueberry", label: "Blueberry" },
    { value: "raspberry", label: "Raspberry" },
    { value: "blackberry", label: "Blackberry" },
    { value: "plum", label: "Plum" },
    { value: "apricot", label: "Apricot" },
    { value: "pear", label: "Pear" },
    { value: "grapefruit", label: "Grapefruit" }
  ];
  let searchValue = $state("");
  const filteredFruits = $derived(
    searchValue === ""
      ? fruits
      : fruits.filter((fruit) =>
          fruit.label.toLowerCase().includes(searchValue.toLowerCase())
        )
  );
</script>
<Combobox.Root
  type="single"
  name="favoriteFruit"
  onOpenChange={(o) => {
    if (!o) searchValue = "";
  }}
>
  <div class="relative">
    <OrangeSlice
      class="text-muted-foreground absolute start-3 top-1/2 size-6 -translate-y-1/2"
    />
    <Combobox.Input
      oninput={(e) => (searchValue = e.currentTarget.value)}
      class="h-input rounded-9px border-border-input bg-background placeholder:text-foreground-alt/50 focus:ring-foreground focus:ring-offset-background focus:outline-hidden inline-flex w-[296px] truncate border px-11 text-base transition-colors focus:ring-2 focus:ring-offset-2 sm:text-sm"
      placeholder="Search a fruit"
      aria-label="Search a fruit"
    />
    <Combobox.Trigger class="absolute end-3 top-1/2 size-6 -translate-y-1/2">
      <CaretUpDown class="text-muted-foreground size-6" />
    </Combobox.Trigger>
  </div>
  <Combobox.Portal>
    <Combobox.Content
      class="border-muted bg-background shadow-popover outline-hidden h-96 max-h-[var(--bits-combobox-content-available-height)] w-[var(--bits-combobox-anchor-width)] min-w-[var(--bits-combobox-anchor-width)] rounded-xl border px-1 py-3"
      sideOffset={10}
      forceMount
    >
      {#snippet child({ wrapperProps, props, open })}
        {#if open}
          <div {...wrapperProps}>
            <div {...props} transition:fly={{ duration: 300 }}>
              <Combobox.ScrollUpButton
                class="flex w-full items-center justify-center"
              >
                <CaretDoubleUp class="size-3" />
              </Combobox.ScrollUpButton>
              <Combobox.Viewport class="p-1">
                {#each filteredFruits as fruit, i (i + fruit.value)}
                  <Combobox.Item
                    class="rounded-button data-highlighted:bg-muted outline-hidden flex h-10 w-full select-none items-center py-3 pl-5 pr-1.5 text-sm  capitalize"
                    value={fruit.value}
                    label={fruit.label}
                  >
                    {#snippet children({ selected })}
                      {fruit.label}
                      {#if selected}
                        <div class="ml-auto">
                          <Check />
                        </div>
                      {/if}
                    {/snippet}
                  </Combobox.Item>
                {:else}
                  <span class="block px-5 py-2 text-sm text-muted-foreground">
                    No results found, try again.
                  </span>
                {/each}
              </Combobox.Viewport>
              <Combobox.ScrollDownButton
                class="flex w-full items-center justify-center"
              >
                <CaretDoubleDown class="size-3" />
              </Combobox.ScrollDownButton>
            </div>
          </div>
        {/if}
      {/snippet}
    </Combobox.Content>
  </Combobox.Portal>
</Combobox.Root>
```

## API Reference

### Combobox. Root

The root combobox component which manages & scopes the state of the combobox.

| Property                                                                                    | Type                                                                                                                                                                                                                                             | Description                                                                                                                                                                                                                                                                                            |
| ------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `type` required | `enum`- 'single' \| 'multiple'                                  | The type of combobox.`Default:  undefined`                                                                                                                                                                                                                            |
| `value` $bindable                            | `union`- string \| string\[]                                    | The value of the combobox. When the type is `'single'`, this should be a string. When the type is `'multiple'`, this should be an array of strings.`Default:  undefined`                                                                                              |
| `onValueChange`                                           | `function`- (string) => void \| (string\[]) => void             | A callback that is fired when the combobox value changes. When the type is `'single'`, the argument will be a string. When the type is `'multiple'`, the argument will be an array of strings.`Default:  undefined`                                                   |
| `open` $bindable                             | `boolean`                                                                                                                                                                                                              | The open state of the combobox menu.`Default: false`                                                                                                                                                                                                                     |
| `onOpenChange`                                            | `function`- (open: boolean) => void                             | A callback that is fired when the combobox menu's open state changes.`Default:  undefined`                                                                                                                                                                            |
| `disabled`                                                | `boolean`                                                                                                                                                                                                              | Whether or not the combobox component is disabled.`Default: false`                                                                                                                                                                                                       |
| `name`                                                    | `string`                                                                                                                                                                                                               | The name to apply to the hidden input element for form submission. If provided, a hidden input element will be rendered to submit the value of the combobox.`Default:  undefined`                                                                                     |
| `required`                                                | `boolean`                                                                                                                                                                                                              | Whether or not the combobox menu is required.`Default: false`                                                                                                                                                                                                            |
| `scrollAlignment`                                         | `enum`- 'nearest' \| 'center'                                   | The alignment of the highlighted item when scrolling.`Default: 'nearest'`                                                                                                                                                                                                |
| `loop`                                                    | `boolean`                                                                                                                                                                                                              | Whether or not the combobox menu should loop through items.`Default: false`                                                                                                                                                                                              |
| `allowDeselect`                                           | `boolean`                                                                                                                                                                                                              | Whether or not the user can deselect the selected item by pressing it in a single select.`Default: true`                                                                                                                                                                 |
| `items`                                                   | `array`- { value: string; label: string; disabled?: boolean}\[] | Optionally provide an array of objects representing the items in the select for autofill capabilities. Only applicable to combobox's with type `single``Default:  undefined`                                                                                          |
| `inputValue`                                              | `string`                                                                                                                                                                                                               | A read-only value that controls the text displayed in the combobox input. Use this to programmatically update the input value when the selection changes outside the component, ensuring the displayed text stays in sync with the actual value.`Default:  undefined` |
| `children`                                                | `Snippet`                                                                                                                                                                                                              | The children content to render.`Default:  undefined`                                                                                                                                                                              |

### Combobox. Trigger

A button which toggles the combobox's open state.

| Property                                                                                    | Type                                                                                                                                                                                                                                                  | Description                                                                                                                                                                                                     |
| ------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `ref` $bindable | `HTMLButtonElement`                                                                                                                                                                                                         | The underlying DOM element being rendered. You can bind to this to get a reference to the element.`Default:  undefined`                                                        |
| `children`                                                | `Snippet`                                                                                                                                                                                                                   | The children content to render.`Default:  undefined`                                                                                                                           |
| `child`                                                   | `Snippet`- type SnippetProps = { props: Record\<string, unknown>; }; | Use render delegation to render your own element. See [Child Snippet](/docs/child-snippet) docs for more information.`Default:  undefined` | | Data Attribute                             | Value                                                                                                                                                                                               | Description                                                                                        |
| ----------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |
| `data-state` | `enum`- 'open' \| 'closed' | The combobox's open state.                                                  |
| `data-disabled`                                   | `''`                                                                                                                                                                                       | Present when the combobox is disabled.                                      |
| `data-combobox-trigger`                           | `''`                                                                                                                                                                                       | Present on the trigger element. |

### Combobox. Viewport

An optional element to track the scroll position of the combobox for rendering the scroll up/down buttons.

| Property                                                                                    | Type                                                                                                                                                                                                                                                  | Description                                                                                                                                                                                                     |
| ------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `ref` $bindable | `HTMLDivElement`                                                                                                                                                                                                            | The underlying DOM element being rendered. You can bind to this to get a reference to the element.`Default:  undefined`                                                        |
| `children`                                                | `Snippet`                                                                                                                                                                                                                   | The children content to render.`Default:  undefined`                                                                                                                           |
| `child`                                                   | `Snippet`- type SnippetProps = { props: Record\<string, unknown>; }; | Use render delegation to render your own element. See [Child Snippet](/docs/child-snippet) docs for more information.`Default:  undefined` | | Data Attribute                                         | Value         | Description                                                                                         |
| ----------------------------------------------------------------------------------------- | ----------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
| `data-combobox-viewport` | `''` | Present on the viewport element. |

### Combobox. Content

The element which contains the combobox's items.

| Property                                                              | Type                                                                                                                                                                                                                                                                  | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| -------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `side` | `enum`- 'top' \| 'bottom' \| 'left' \| 'right'                                       | The preferred side of the anchor to render the floating element against when open. Will be reversed when collisions occur.`Default: bottom`                                                                                                                                                                                                                                                                                        |
| `sideOffset`                        | `number`                                                                                                                                                                                                                                    | The distance in pixels from the anchor to the floating element.`Default: 0`                                                                                                                                                                                                                                                                                                                                                        |
| `align`                             | `enum`- 'start' \| 'center' \| 'end'                                                 | The preferred alignment of the anchor to render the floating element against when open. This may change when collisions occur.`Default: start`                                                                                                                                                                                                                                                                                     |
| `alignOffset`                       | `number`                                                                                                                                                                                                                                    | The distance in pixels from the anchor to the floating element.`Default: 0`                                                                                                                                                                                                                                                                                                                                                        |
| `arrowPadding`                      | `number`                                                                                                                                                                                                                                    | The amount in pixels of virtual padding around the viewport edges to check for overflow which will cause a collision.`Default: 0`                                                                                                                                                                                                                                                                                                  |
| `avoidCollisions`                   | `boolean`                                                                                                                                                                                                                                   | When `true`, overrides the `side` and `align` options to prevent collisions with the boundary edges.`Default: true`                                                                                                                                                                                                                                                                                                                |
| `collisionBoundary`                 | `union`- Element \| null                                                           | A boundary element or array of elements to check for collisions against.`Default:  undefined`                                                                                                                                                                                                                                                                                                                                   |
| `collisionPadding`                  | `union`- number \| Partial\&lt;Record\&lt;Side, number\&gt;\&gt;                   | The amount in pixels of virtual padding around the viewport edges to check for overflow which will cause a collision.`Default: 0`                                                                                                                                                                                                                                                                                                  |
| `sticky`                            | `enum`- 'partial' \| 'always'                                                      | The sticky behavior on the align axis. `'partial'` will keep the content in the boundary as long as the trigger is at least partially in the boundary whilst `'always'` will keep the content in the boundary regardless.`Default: partial`                                                                                                                                                                                        |
| `hideWhenDetached`                  | `boolean`                                                                                                                                                                                                                                   | When `true`, hides the content when it is detached from the DOM. This is useful for when you want to hide the content when the user scrolls away.`Default: true`                                                                                                                                                                                                                                                                   |
| `updatePositionStrategy`            | `enum`- 'optimized' \| 'always'                                                    | The strategy to use when updating the position of the content. When `'optimized'` the content will only be repositioned when the trigger is in the viewport. When `'always'` the content will be repositioned whenever the position changes.`Default: optimized`                                                                                                                                                                   |
| `strategy`                          | `enum`- 'fixed' \| 'absolute'                                                      | The positioning strategy to use for the floating element. When `'fixed'` the element will be positioned relative to the viewport. When `'absolute'` the element will be positioned relative to the nearest positioned ancestor.`Default: fixed`                                                                                                                                                                                    |
| `preventScroll`                     | `boolean`                                                                                                                                                                                                                                   | When `true`, prevents the body from scrolling when the content is open. This is useful when you want to use the content as a modal.`Default: false`                                                                                                                                                                                                                                                                                |
| `customAnchor`                      | `union`- string \| HTMLElement \| Measurable \| null                               | Use an element other than the trigger to anchor the content to. If provided, the content will be anchored to the provided element instead of the trigger.`Default: null`                                                                                                                                                                                                                                                           |
| `onEscapeKeydown`                   | `function`- (event: KeyboardEvent) => void                                         | Callback fired when an escape keydown event occurs in the floating content. You can call `event.preventDefault()` to prevent the default behavior of handling the escape keydown event.`Default:  undefined`                                                                                                                                                                                                                    |
| `escapeKeydownBehavior`             | `enum`- 'close' \| 'ignore' \| 'defer-otherwise-close' \| 'defer-otherwise-ignore' | The behavior to use when an escape keydown event occurs in the floating content. `'close'` will close the content immediately. `'ignore'` will prevent the content from closing. `'defer-otherwise-close'` will defer to the parent element if it exists, otherwise it will close the content. `'defer-otherwise-ignore'` will defer to the parent element if it exists, otherwise it will ignore the interaction.`Default: close` |
| `onInteractOutside`                 | `function`- (event: PointerEvent) => void                                          | Callback fired when an outside interaction event occurs, which is a `pointerdown` event. You can call `event.preventDefault()` to prevent the default behavior of handling the outside interaction.`Default:  undefined`                                                                                                                                                                                                        |
| `onFocusOutside`                    | `function`- (event: FocusEvent) => void                                            | Callback fired when focus leaves the dismissible layer. You can call `event.preventDefault()` to prevent the default behavior on focus leaving the layer.`Default:  undefined`                                                                                                                                                                                                                                                  |
| `interactOutsideBehavior`           | `enum`- 'close' \| 'ignore' \| 'defer-otherwise-close' \| 'defer-otherwise-ignore' | The behavior to use when an interaction occurs outside of the floating content. `'close'` will close the content immediately. `'ignore'` will prevent the content from closing. `'defer-otherwise-close'` will defer to the parent element if it exists, otherwise it will close the content. `'defer-otherwise-ignore'` will defer to the parent element if it exists, otherwise it will ignore the interaction.`Default: close`  |
| `preventOverflowTextSelection`      | `boolean`                                                                                                                                                                                                                                   | When `true`, prevents the text selection from overflowing the bounds of the element.`Default: true`                                                                                                                                                                                                                                                                                                                                |
| `dir`                               | `enum`- 'ltr' \| 'rtl'                                                             | The reading direction of the app.`Default: 'ltr'`                                                                                                                                                                                                                                                                                                                                                                                  |
| `loop`                              | `boolean`                                                                                                                                                                                                                                   | Whether or not the combobox should loop through items when reaching the end.`Default: false`                                                                                                                                                                                                                                                                                                                                       |
| `forceMount`                        | `boolean`                                                                                                                                                                                                                                   | Whether or not to forcefully mount the content. This is useful if you want to use Svelte transitions or another animation library for the content.`Default: false`                                                                                                                                                                                                                                                                 |
| `ref` $bindable        | `HTMLDivElement`                                                                                                                                                                                                                            | The underlying DOM element being rendered. You can bind to this to get a reference to the element.`Default:  undefined`                                                                                                                                                                                                                                                                                                         |
| `children`                          | `Snippet`- Snippet                                                                 | The children content to render.`Default:  undefined`                                                                                                                                                                                                                                                                                                                                                                            |
| `child`                             | `Snippet`- type SnippetProps = { props: Record\<string, unknown>; };               | Use render delegation to render your own element. See [Child Snippet](/docs/child-snippet) docs for more information.`Default:  undefined`                                                                                                                                                                                                                                                  | | Data Attribute                             | Value                                                                                                                                                                                                 | Description                                                                                        |
| ----------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |
| `data-state` | `enum`- 'open' \| 'closed' | The combobox's open state.                                                  |
| `data-combobox-content`                           | `''`                                                                                                                                                                                         | Present on the content element. |

| CSS Variable                                                             | Description                                                                                                    |
| ----------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `--bits-combobox-content-transform-origin` | The transform origin of the combobox content element.                                   |
| `--bits-combobox-content-available-width`                                       | The available width of the combobox content element.                                    |
| `--bits-combobox-content-available-height`                                      | The available height of the combobox content element.                                   |
| `--bits-combobox-anchor-width`                                                  | The width of the combobox trigger element.                                              |
| `--bits-combobox-anchor-height`                                                 | The height of the combobox trigger element. |

### Combobox. ContentStatic

The element which contains the combobox's items. (Static/No Floating UI)

| Property                                                                         | Type                                                                                                                                                                                                                                                                  | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| ------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `onEscapeKeydown` | `function`- (event: KeyboardEvent) => void                                         | Callback fired when an escape keydown event occurs in the floating content. You can call `event.preventDefault()` to prevent the default behavior of handling the escape keydown event.`Default:  undefined`                                                                                                                                                                                                                    |
| `escapeKeydownBehavior`                        | `enum`- 'close' \| 'ignore' \| 'defer-otherwise-close' \| 'defer-otherwise-ignore' | The behavior to use when an escape keydown event occurs in the floating content. `'close'` will close the content immediately. `'ignore'` will prevent the content from closing. `'defer-otherwise-close'` will defer to the parent element if it exists, otherwise it will close the content. `'defer-otherwise-ignore'` will defer to the parent element if it exists, otherwise it will ignore the interaction.`Default: close` |
| `onInteractOutside`                            | `function`- (event: PointerEvent) => void                                          | Callback fired when an outside interaction event occurs, which is a `pointerdown` event. You can call `event.preventDefault()` to prevent the default behavior of handling the outside interaction.`Default:  undefined`                                                                                                                                                                                                        |
| `onFocusOutside`                               | `function`- (event: FocusEvent) => void                                            | Callback fired when focus leaves the dismissible layer. You can call `event.preventDefault()` to prevent the default behavior on focus leaving the layer.`Default:  undefined`                                                                                                                                                                                                                                                  |
| `interactOutsideBehavior`                      | `enum`- 'close' \| 'ignore' \| 'defer-otherwise-close' \| 'defer-otherwise-ignore' | The behavior to use when an interaction occurs outside of the floating content. `'close'` will close the content immediately. `'ignore'` will prevent the content from closing. `'defer-otherwise-close'` will defer to the parent element if it exists, otherwise it will close the content. `'defer-otherwise-ignore'` will defer to the parent element if it exists, otherwise it will ignore the interaction.`Default: close`  |
| `onOpenAutoFocus`                              | `function`- (event: Event) => void                                                 | Event handler called when auto-focusing the content as it is opened. Can be prevented.`Default:  undefined`                                                                                                                                                                                                                                                                                                                     |
| `onCloseAutoFocus`                             | `function`- (event: Event) => void                                                 | Event handler called when auto-focusing the content as it is closed. Can be prevented.`Default:  undefined`                                                                                                                                                                                                                                                                                                                     |
| `trapFocus`                                    | `boolean`                                                                                                                                                                                                                                   | Whether or not to trap the focus within the content when open.`Default: true`                                                                                                                                                                                                                                                                                                                                                      |
| `preventScroll`                                | `boolean`                                                                                                                                                                                                                                   | When `true`, prevents the body from scrolling when the content is open. This is useful when you want to use the content as a modal.`Default: true`                                                                                                                                                                                                                                                                                 |
| `preventOverflowTextSelection`                 | `boolean`                                                                                                                                                                                                                                   | When `true`, prevents the text selection from overflowing the bounds of the element.`Default: true`                                                                                                                                                                                                                                                                                                                                |
| `dir`                                          | `enum`- 'ltr' \| 'rtl'                                                             | The reading direction of the app.`Default: 'ltr'`                                                                                                                                                                                                                                                                                                                                                                                  |
| `loop`                                         | `boolean`                                                                                                                                                                                                                                   | Whether or not the combobox should loop through items when reaching the end.`Default: false`                                                                                                                                                                                                                                                                                                                                       |
| `forceMount`                                   | `boolean`                                                                                                                                                                                                                                   | Whether or not to forcefully mount the content. This is useful if you want to use Svelte transitions or another animation library for the content.`Default: false`                                                                                                                                                                                                                                                                 |
| `ref` $bindable                   | `HTMLDivElement`                                                                                                                                                                                                                            | The underlying DOM element being rendered. You can bind to this to get a reference to the element.`Default:  undefined`                                                                                                                                                                                                                                                                                                         |
| `children`                                     | `Snippet`- Snippet                                                                 | The children content to render.`Default:  undefined`                                                                                                                                                                                                                                                                                                                                                                            |
| `child`                                        | `Snippet`- type SnippetProps = { props: Record\<string, unknown>; };               | Use render delegation to render your own element. See [Child Snippet](/docs/child-snippet) docs for more information.`Default:  undefined`                                                                                                                                                                                                                                                  | | Data Attribute                             | Value                                                                                                                                                                                                 | Description                                                                                        |
| ----------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |
| `data-state` | `enum`- 'open' \| 'closed' | The combobox's open state.                                                  |
| `data-combobox-content`                           | `''`                                                                                                                                                                                         | Present on the content element. |

### Combobox. Portal

When used, will render the combobox content into the body or custom `to` element when open

| Property                                                            | Type                                                                                                                                                                                                                       | Description                                                                                                                                                    |
| ------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `to` | `union`- string \| Element \| undefined | Where to render the content when it is open. Defaults to the body.`Default: body`                                                |
| `disabled`                        | `boolean`                                                                                                                                                                                        | Whether the portal is disabled or not. When disabled, the content will be rendered in its original DOM location.`Default: false` |
| `children`                        | `Snippet`                                                                                                                                                                                        | The children content to render.`Default:  undefined`                                      |

### Combobox. Item

A combobox item, which must be a child of the `Combobox.Content` component.

| Property                                                                                     | Type                                                                                                                                                                                                                                                    | Description                                                                                                                                                                                                     |
| ------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `value` required | `string`                                                                                                                                                                                                                      | The value of the item.`Default:  undefined`                                                                                                                                    |
| `label`                                                    | `string`                                                                                                                                                                                                                      | The label of the item, which is what the list will be filtered by.`Default:  undefined`                                                                                        |
| `disabled`                                                 | `boolean`                                                                                                                                                                                                                     | Whether or not the combobox item is disabled. This will prevent interaction/selection.`Default: false`                                                                            |
| `onHighlight`                                              | `function`- () => void                                               | A callback that is fired when the item is highlighted.`Default:  undefined`                                                                                                    |
| `onUnhighlight`                                            | `function`- () => void                                               | A callback that is fired when the item is unhighlighted.`Default:  undefined`                                                                                                  |
| `ref` $bindable                               | `HTMLDivElement`                                                                                                                                                                                                              | The underlying DOM element being rendered. You can bind to this to get a reference to the element.`Default:  undefined`                                                        |
| `children`                                                 | `Snippet`                                                                                                                                                                                                                     | The children content to render.`Default:  undefined`                                                                                                                           |
| `child`                                                    | `Snippet`- type SnippetProps = { props: Record\<string, unknown>; }; | Use render delegation to render your own element. See [Child Snippet](/docs/child-snippet) docs for more information.`Default:  undefined` | | Data Attribute                             | Value             | Description                                                                                                                |
| ----------------------------------------------------------------------------- | --------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `data-value` | `string` | The value of the combobox item.                                                                     |
| `data-label`                                      | `string` | The label of the combobox item.                                                                     |
| `data-disabled`                                   | `''`     | Present when the item is disabled.                                                                  |
| `data-highlighted`                                | `''`     | Present when the item is highlighted, which is either via keyboard navigation of the menu or hover. |
| `data-selected`                                   | `''`     | Present when the item is selected.                                                                  |
| `data-combobox-item`                              | `''`     | Present on the item element.                            |

### Combobox. Input

A representation of the combobox input element, which is typically displayed in the content.

| Property                                                                      | Type                                                                                                                                                                                                                                                    | Description                                                                                                                                                                                                                  |
| ---------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `defaultValue` | `string`                                                                                                                                                                                                                      | The default value of the input. This is not a reactive prop and is only used to populate the input when the combobox is first mounted if there is already a value set.`Default:  undefined` |
| `clearOnDeselect`                           | `boolean`                                                                                                                                                                                                                     | Whether to clear the input when the last item is deselected.`Default: false`                                                                                                                   |
| `ref` $bindable                | `HTMLInputElement`                                                                                                                                                                                                            | The underlying DOM element being rendered. You can bind to this to get a reference to the element.`Default:  undefined`                                                                     |
| `children`                                  | `Snippet`                                                                                                                                                                                                                     | The children content to render.`Default:  undefined`                                                                                                                                        |
| `child`                                     | `Snippet`- type SnippetProps = { props: Record\<string, unknown>; }; | Use render delegation to render your own element. See [Child Snippet](/docs/child-snippet) docs for more information.`Default:  undefined`              | | Data Attribute                             | Value                                                                                                                                                                                                 | Description                                                                                      |
| ----------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| `data-state` | `enum`- 'open' \| 'closed' | The combobox's open state.                                                |
| `data-disabled`                                   | `''`                                                                                                                                                                                         | Present when the combobox is disabled.                                    |
| `data-combobox-input`                             | `''`                                                                                                                                                                                         | Present on the input element. |

### Combobox. Group

A group of related combobox items.

| Property                                                                                    | Type                                                                                                                                                                                                                                                    | Description                                                                                                                                                                                                     |
| ------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `ref` $bindable | `HTMLDivElement`                                                                                                                                                                                                              | The underlying DOM element being rendered. You can bind to this to get a reference to the element.`Default:  undefined`                                                        |
| `children`                                                | `Snippet`                                                                                                                                                                                                                     | The children content to render.`Default:  undefined`                                                                                                                           |
| `child`                                                   | `Snippet`- type SnippetProps = { props: Record\<string, unknown>; }; | Use render delegation to render your own element. See [Child Snippet](/docs/child-snippet) docs for more information.`Default:  undefined` | | Data Attribute                                      | Value         | Description                                                                                      |
| -------------------------------------------------------------------------------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| `data-combobox-group` | `''` | Present on the group element. |

### Combobox. GroupHeading

A heading for the parent combobox group. This is used to describe a group of related combobox items.

| Property                                                                                    | Type                                                                                                                                                                                                                                                    | Description                                                                                                                                                                                                     |
| ------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `ref` $bindable | `HTMLDivElement`                                                                                                                                                                                                              | The underlying DOM element being rendered. You can bind to this to get a reference to the element.`Default:  undefined`                                                        |
| `children`                                                | `Snippet`                                                                                                                                                                                                                     | The children content to render.`Default:  undefined`                                                                                                                           |
| `child`                                                   | `Snippet`- type SnippetProps = { props: Record\<string, unknown>; }; | Use render delegation to render your own element. See [Child Snippet](/docs/child-snippet) docs for more information.`Default:  undefined` | | Data Attribute                                              | Value         | Description                                                                                              |
| ---------------------------------------------------------------------------------------------- | ----------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |
| `data-combobox-group-heading` | `''` | Present on the group heading element. |

### Combobox. ScrollUpButton

An optional scroll up button element to improve the scroll experience within the combobox. Should be used in conjunction with the `Combobox.Viewport` component.

| Property                                                               | Type                                                                                                                                                                                                                                                    | Description                                                                                                                                                                                                     |
| --------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `delay` | `function`- (tick: number) => number                                 | Controls the initial delay (tick 0) and delay between auto-scrolls in milliseconds.`Default: () => 50`                                                                            |
| `ref` $bindable         | `HTMLDivElement`                                                                                                                                                                                                              | The underlying DOM element being rendered. You can bind to this to get a reference to the element.`Default:  undefined`                                                        |
| `children`                           | `Snippet`                                                                                                                                                                                                                     | The children content to render.`Default:  undefined`                                                                                                                           |
| `child`                              | `Snippet`- type SnippetProps = { props: Record\<string, unknown>; }; | Use render delegation to render your own element. See [Child Snippet](/docs/child-snippet) docs for more information.`Default:  undefined` | | Data Attribute                                                 | Value         | Description                                                                                                 |
| ------------------------------------------------------------------------------------------------- | ----------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------- |
| `data-combobox-scroll-up-button` | `''` | Present on the scroll up button element. |

### Combobox. ScrollDownButton

An optional scroll down button element to improve the scroll experience within the combobox. Should be used in conjunction with the `Combobox.Viewport` component.

| Property                                                               | Type                                                                                                                                                                                                                                                    | Description                                                                                                                                                                                                     |
| --------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `delay` | `function`- (tick: number) => number                                 | Controls the initial delay (tick 0) and delay between auto-scrolls in milliseconds.`Default: () => 50`                                                                            |
| `ref` $bindable         | `HTMLDivElement`                                                                                                                                                                                                              | The underlying DOM element being rendered. You can bind to this to get a reference to the element.`Default:  undefined`                                                        |
| `children`                           | `Snippet`                                                                                                                                                                                                                     | The children content to render.`Default:  undefined`                                                                                                                           |
| `child`                              | `Snippet`- type SnippetProps = { props: Record\<string, unknown>; }; | Use render delegation to render your own element. See [Child Snippet](/docs/child-snippet) docs for more information.`Default:  undefined` | | Data Attribute                                                   | Value         | Description                                                                                                   |
| --------------------------------------------------------------------------------------------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `data-combobox-scroll-down-button` | `''` | Present on the scroll down button element. |

### Combobox. Arrow

An optional arrow element which points to the content when open.

| Property                                                               | Type                                                                                                                                                                                                                                                    | Description                                                                                                                                                                                                     |
| --------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `width` | `number`                                                                                                                                                                                                                      | The width of the arrow in pixels.`Default: 8`                                                                                                                                     |
| `height`                             | `number`                                                                                                                                                                                                                      | The height of the arrow in pixels.`Default: 8`                                                                                                                                    |
| `ref` $bindable         | `HTMLDivElement`                                                                                                                                                                                                              | The underlying DOM element being rendered. You can bind to this to get a reference to the element.`Default:  undefined`                                                        |
| `children`                           | `Snippet`                                                                                                                                                                                                                     | The children content to render.`Default:  undefined`                                                                                                                           |
| `child`                              | `Snippet`- type SnippetProps = { props: Record\<string, unknown>; }; | Use render delegation to render your own element. See [Child Snippet](/docs/child-snippet) docs for more information.`Default:  undefined` | | Data Attribute                             | Value         | Description                                                                                      |
| ----------------------------------------------------------------------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| `data-arrow` | `''` | Present on the arrow element. |